{"version":3,"sources":["data_stores/UsersData.js","InputField.js","SubmitButton.js","LoginForm.js","App.js","reportWebVitals.js","index.js"],"names":["extendObservable","this","loading","isLoggedIn","username","InputField","className","type","props","placeholder","value","onChange","e","target","React","Component","SubmitButton","disabled","onClick","text","LoginForm","state","password","buttonDisabled","property","val","trim","length","setState","a","fetch","method","headers","body","JSON","stringify","res","json","result","success","UsersData","resetForm","alert","message","console","log","setInputValue","doLogin","App","doLogout","observer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b50570b0.chunk.js","sourcesContent":["import {extendObservable} from 'mobx';\r\n\r\nclass UsersData {\r\n    constructor() {\r\n        extendObservable( this, {\r\n            loading:true,\r\n            isLoggedIn:false,\r\n            username:''\r\n        })\r\n    }\r\n}\r\n\r\nexport default new UsersData();","import React from 'react';\r\n\r\n\r\nclass InputField extends  React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"inputField\">\r\n\r\n                <input\r\n                className='input'\r\n                type={[this.props.type]}\r\n               placeholder={this.props.placeholder}\r\n                value={this.props.value}\r\n                onChange={(e) => this .props.onChange(e.target.value)}/>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default InputField;\r\n","import React from 'react';\r\n\r\n\r\nclass SubmitButton extends  React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"submitButton\">\r\n                <button\r\n                className='button'\r\n                disabled={this.props.disabled}\r\n                onClick={ () => this.props.onClick()}>\r\n                    {this.props.text}\r\n                </button>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SubmitButton;\r\n","import React from 'react';\r\nimport InputField from \"./InputField\";\r\nimport SubmitButton from \"./SubmitButton\";\r\nimport UsersData from \"./data_stores/UsersData\";\r\nimport {values} from \"mobx\";\r\n\r\n\r\nclass LoginForm extends  React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username:'',\r\n            password:'',\r\n            buttonDisabled: false\r\n        }\r\n    }\r\n\r\n    setInputValue(property,val){\r\n        val = val.trim();\r\n        if (val.length> 12) {\r\n            return ;\r\n        }\r\n        this.setState({\r\n            [property]:val\r\n        })\r\n    }\r\n\r\n    resetForm(){\r\n        this.setState({\r\n            username:'',\r\n            password:'',\r\n            buttonDisabled: false\r\n        })\r\n    }\r\n    async doLogin(){\r\n        if(!this.state.username) {\r\n            return;\r\n        }\r\n        if(!this.state.password) {\r\n            return;\r\n        }\r\n        this.setState({\r\n            buttonDisabled:true\r\n        })\r\n        try {\r\n            let res = await fetch('/login',{\r\n                method:'post',\r\n                headers:{\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    username:this.state.username,\r\n                    password:this.state.password\r\n                })\r\n            });\r\n            let result = await res.json();\r\n            if (result && result.success){\r\n                UsersData.isLoggedIn= true;\r\n                UsersData.username=result.username;\r\n            }\r\n            else if (result && result.success ===false){\r\n                this.resetForm();\r\n                alert(result.message);\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n            this.resetForm();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"loginForm\">\r\n\r\n            Log In\r\n                <InputField\r\n                type='text'\r\n                placeholder='Username'\r\n                value={this.state.username ? this.state.username:''}\r\n                onChange={(value) => this.setInputValue('username',value)}/>\r\n\r\n                <InputField\r\n                    type='password'\r\n                    placeholder='Password'\r\n                    value={this.state.password ? this.state.password:''}\r\n                    onChange={(value) => this.setInputValue('password',value)}/>\r\n\r\n                    <SubmitButton\r\n                    text='Login'\r\n                    disabled={this.state.buttonDisabled}\r\n                    onClick={() => this.doLogin()}/>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoginForm;\r\n","import React from 'react';\nimport {observer} from 'mobx-react';\nimport UsersData    from \"./data_stores/UsersData\";\nimport LoginForm    from \"./LoginForm\";\nimport SubmitButton from \"./SubmitButton\";\nimport './App.css';\n\nclass App extends  React.Component {\n\n    async componentDidMount() {\n        try {\n            let res = await fetch('/isLoggedIn',\n                {\n                    method: 'post',\n                    headers: {\n                        'Accept': 'application/json',\n                        'Content-Type': 'application/json'\n                    }\n                });\n            let result = await res.json();\n            if (result && result.success) {\n                UsersData.loading = false;\n                UsersData.isLoggedIn = true;\n                UsersData.username = result.username;\n            } else {\n                UsersData.loading = false;\n                UsersData.isLoggedIn = false;\n            }\n        } catch (e) {\n            UsersData.loading = false;\n            UsersData.isLoggedIn = false;\n        }\n    }\n\n    async doLogout() {\n        try {\n            let res = await fetch('/logout',\n                {\n                    method: 'post',\n                    headers: {\n                        'Accept': 'application/json',\n                        'Content-Type': 'application/json'\n                    }\n                });\n            let result = await res.json();\n\n            if (result && result.success) {\n                UsersData.isLoggedIn = false;\n                UsersData.username = '';\n            }\n\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n\n    render() {\n\n        if (UsersData.loading) {\n            return (\n                <div className=\"app\">\n                    <div className='container'>\n                        Loading, please wait...!\n                    </div>\n                </div>\n            );\n        }\n        else {\n            if(UsersData.isLoggedIn) {\n                return (\n                    <div className=\"app\">\n                        <div className='container'>\n                        Welcome {UsersData.username}\n\n                        <SubmitButton\n                        text={'Logout'}\n                        disabled={false}\n                        onClick={ () => this.doLogout()}\n                        />\n                        </div>\n                    </div>\n                );\n            }\n            return (\n                <div className=\"app\">\n                    <div className='container'>\n                    <LoginForm/>\n                    </div>\n                </div>\n            );\n        }\n    }\n}\n\nexport default observer(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}